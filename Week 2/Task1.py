#Cравнение предложений
# Дан набор предложений, скопированных с Википедии. Каждое из них имеет "кошачью тему" в одном из трех смыслов:

# кошки (животные)
# UNIX-утилита cat для вывода содержимого файлов
# версии операционной системы OS X, названные в честь семейства кошачьих
# Ваша задача — найти два предложения, которые ближе всего по смыслу к расположенному в самой первой строке. В качестве меры близости по смыслу мы будем использовать косинусное расстояние.

# Выполните следующие шаги:

# Скачайте файл с предложениями (sentences.txt).
# Каждая строка в файле соответствует одному предложению. Считайте их, приведите каждую к нижнему регистру с помощью строковой функции lower().
# Произведите токенизацию, то есть разбиение текстов на слова. Для этого можно воспользоваться регулярным выражением, которое считает разделителем любой символ, не являющийся буквой: re.split('[^a-z]', t). Не забудьте удалить пустые слова после разделения.
# Составьте список всех слов, встречающихся в предложениях. Сопоставьте каждому слову индекс от нуля до (d - 1), где d — число различных слов в предложениях. Для этого удобно воспользоваться структурой dict.
# Создайте матрицу размера n * d, где n — число предложений. Заполните ее: элемент с индексом (i, j) в этой матрице должен быть равен количеству вхождений j-го слова в i-е предложение. У вас должна получиться матрица размера 22 * 254.
# Найдите косинусное расстояние от предложения в самой первой строке (In comparison to dogs, cats have not undergone...) до всех остальных с помощью функции scipy.spatial.distance.cosine. Какие номера у двух предложений, ближайших к нему по этому расстоянию (строки нумеруются с нуля)? Эти два числа и будут ответами на задание. Само предложение (In comparison to dogs, cats have not undergone... ) имеет индекс 0.
# Запишите полученные числа в файл, разделив пробелом. Обратите внимание, что файл должен состоять из одной строки, в конце которой не должно быть переноса. Пример файла с решением вы можете найти в конце задания (submission-1.txt).
# Совпадают ли ближайшие два предложения по тематике с первым? Совпадают ли тематики у следующих по близости предложений?
# Разумеется, использованный вами метод крайне простой. Например, он не учитывает формы слов (так, cat и cats он считает разными словами, хотя по сути они означают одно и то же), не удаляет из текстов артикли и прочие ненужные слова. Позже мы будем подробно изучать анализ текстов, где выясним, как достичь высокого качества в задаче поиска похожих предложений.

import re
import collections
from scipy.spatial import distance

token_texts = []
for i in texts:
    t = re.split('[^a-z]', i)
    t = [x for x in t if x]
    token_texts.append(t)

full = []
for i in token_texts:
    full += i

counter = collections.Counter(full)

dictionary = list(dict(counter).keys())
A = np.zeros((len(token_texts), len(dictionary)))
for i in range(len(token_texts)):
    count = collections.Counter(token_texts[i])
    for j in range(len(dictionary)):
        A[i,j] = count[dictionary[j]]
        
dist = [[] for i in range(len(token_texts)-1)]
for i in range(1, len(token_texts)):
    dist[i-1].append(distance.cosine(A[0], A[i]))
    dist[i-1].append(i)
    
k = sorted(dist)[:2]
l = str(k[0][1]) + ' ' + str(k[1][1])

with open('file.txt', 'w') as file:
    file.write(l)
    
#6 4
